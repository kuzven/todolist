version: '3.8'

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: web
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    command: >
      sh -c "
      python manage.py migrate &&
      python manage.py collectstatic --noinput &&
      python manage.py createsuperuser --username $DJANGO_SUPERUSER_USERNAME --email $DJANGO_SUPERUSER_EMAIL --noinput || true &&
      python manage.py runserver 0.0.0.0:8000
      "
    expose:
      - "8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - static_volume:/app/staticfiles
    networks:
      - mynetwork
    restart: unless-stopped

  db:
    image: postgres:15
    container_name: db
    environment:
      POSTGRES_DB: ${PG_DATABASE}
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_USER} -d ${PG_DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mynetwork
    restart: unless-stopped

  bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: bot
    depends_on:
      - db
    command: python -m bot
    networks:
      - mynetwork
    dns:
      - 8.8.8.8
      - 8.8.4.4
    restart: unless-stopped

  redis:
    image: redis:7.4.2
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - mynetwork
    restart: unless-stopped

  nginx:
    build:
      context: .
      dockerfile: nginx.Dockerfile
    container_name: nginx
    ports:
      - "80:80"
    depends_on:
      - web
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 10s
      timeout: 3s
      retries: 3
    volumes:
      - static_volume:/app/staticfiles
    networks:
      - mynetwork
    restart: unless-stopped

  celery:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: celery
    depends_on:
      - db
      - redis
    command: >
      celery -A my_celery worker --loglevel=info --pool=solo
    networks:
      - mynetwork
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  static_volume:
    driver: local

networks:
  mynetwork:
    driver: bridge